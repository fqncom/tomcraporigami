<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
 
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\fqn.ItcastOA.Model\\OA_Model.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using fqn.ItcastOA.Dal;
using fqn.ItcastOA.IDal;

namespace fqn.ItcastOA.DalFactory
{
	public partial class DbSession : IDbSession
    {
<#
// Emit Entity Types

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);    
#>	

<#string newName = entity.Name.First().ToString().ToLower() + entity.Name.Substring(1,entity.Name.Length-1);#>
		private I<#=entity.Name#>Dal _<#=newName#>Dal;
        public I<#=entity.Name#>Dal <#=entity.Name#>Dal
        {
            get
            {
                return this._<#=newName#>Dal ?? new <#=entity.Name#>Dal();
            }
            set { this._<#=newName#>Dal = value; }
        }
<#}#>
	}	
}